name: Build Portable Privoxy
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: brew install autoconf automake pcre
      
      - name: Install dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y autoconf automake libpcre3-dev
      
      - name: Download Privoxy source
        run: |
          PRIVOXY_VERSION="3.0.34"
          # 使用正确的下载链接
          wget "https://www.privoxy.org/sf-download-mirror/Sources/${PRIVOXY_VERSION}%20(stable)%20src.tar.gz" -O privoxy.tar.gz
          tar -xzf privoxy.tar.gz
          mv privoxy-${PRIVOXY_VERSION}-stable privoxy-src
      
      - name: Configure and compile Privoxy
        run: |
          cd privoxy-src
          autoheader
          autoconf
          ./configure --enable-static
          make
      
      - name: Modify Privoxy configuration
        run: |
          cd privoxy-src
          cp config default.config
          # 修改配置文件，让Privoxy监听所有网络接口
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '.bak' 's/^listen-address  127.0.0.1:8118/listen-address  0.0.0.0:8118/' default.config
            sed -i '.bak' 's/^listen-address  \[::1\]:8118/#listen-address  [::1]:8118/' default.config
          else
            sed -i 's/^listen-address  127.0.0.1:8118/listen-address  0.0.0.0:8118/' default.config
            sed -i 's/^listen-address  \[::1\]:8118/#listen-address  [::1]:8118/' default.config
          fi
          echo "验证配置修改："
          grep "listen-address" default.config | head -5
      
      - name: Create packaging directory
        run: |
          mkdir privoxy-package
          cd privoxy-src
          cp privoxy ../privoxy-package/
          cp default.config ../privoxy-package/
          
          # 为Linux创建启动脚本
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cat > ../privoxy-package/start-privoxy.sh << 'EOF'
          #!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          echo "Starting Privoxy on 0.0.0.0:8118..."
          "$DIR/privoxy" "$DIR/default.config"
          EOF
            chmod +x ../privoxy-package/start-privoxy.sh
          fi
          
          # 为macOS创建启动脚本
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            cat > ../privoxy-package/start-privoxy.sh << 'EOF'
          #!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          echo "Starting Privoxy on 0.0.0.0:8118..."
          "$DIR/privoxy" "$DIR/default.config"
          EOF
            chmod +x ../privoxy-package/start-privoxy.sh
          fi
          
          # 创建README文件
          cat > ../privoxy-package/README.txt << 'EOF'
          Privoxy Portable Version
          
          Usage:
          1. Run ./start-privoxy.sh (Linux/macOS)
          2. Configure your browser to use HTTP proxy: 127.0.0.1:8118
          3. Or use it as network proxy server (accessible from other devices): YOUR_IP:8118
          
          Configuration file: default.config
          EOF
      
      - name: Package Privoxy for macOS (Tarball)
        if: runner.os == 'macOS'
        run: |
          tar -czf privoxy-portable-macos.tar.gz -C privoxy-package .
      
      - name: Package Privoxy for Linux (Tarball)
        if: runner.os == 'Linux'
        run: |
          tar -czf privoxy-portable-linux.tar.gz -C privoxy-package .
      
      - name: Upload Privoxy artifact
        uses: actions/upload-artifact@v4
        with:
          name: privoxy-portable-${{ runner.os }}
          path: |
            privoxy-portable-*.tar.gz
          if-no-files-found: error
